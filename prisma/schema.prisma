// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Example {
  id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? //@db.Text
  access_token      String? //@db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? //@db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  inviteToken   InviteToken?
  image         String?
  accounts      Account[]
  sessions      Session[]
  tasks         Task[]
  deadlines     Deadline[]
  projects      Project[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model InviteToken {
  id     String  @id @default(cuid())
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @unique
}

model Project {
  id          String     @id @default(cuid())
  title       String
  description String?
  completed   Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  tasks       Task[]
  deadlines   Deadline[]
}

model Deadline {
  id          String    @id @default(cuid())
  description String?
  date        DateTime
  createdAt   DateTime  @default(now())
  completedAt DateTime?
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  tasks       Task[]
  Project     Project?  @relation(fields: [projectId], references: [id])
  projectId   String?
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  completed   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  completedAt DateTime?
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  deadline    Deadline  @relation(fields: [deadlineId], references: [id])
  deadlineId  String
  Project     Project?  @relation(fields: [projectId], references: [id])
  projectId   String?
}
